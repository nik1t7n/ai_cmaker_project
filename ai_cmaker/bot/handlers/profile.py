import logging
from datetime import datetime

import httpx
from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import Bold, Text
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.constants import WEBHOOK_BASE_URL

router = Router()


@router.message(Command("profile"))
async def cmd_profile(message: types.Message, state: FSMContext):
    state_data = await state.get_data()

    user_id = state_data.get("user_id")
    if not user_id:
        user_id = message.from_user.id
        await state.update_data(user_id=user_id)

    async with httpx.AsyncClient(timeout=10) as client:
        response = await client.get(f"{WEBHOOK_BASE_URL}/api/users/{user_id}")

        # if somehow user does not exists
        # it is possible only if he pressed /profile command before /start
        if response.status_code == 404:
            warning_msg = Text(
                Bold(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º - –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /start"
                )
            ).as_markdown()
            await message.answer(text=warning_msg, parse_mode=ParseMode.MARKDOWN_V2)
        if response.status_code == 200:
            data = response.json()
            credits_left = data.get("credits_left", 0)
            credits_expire_date_str = data.get("credits_expire_date")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
            if credits_expire_date_str:
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    credits_expire_date = datetime.fromisoformat(
                        credits_expire_date_str.replace("Z", "+00:00")
                    )
                    current_date = datetime.now()

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
                    formatted_expire_date = credits_expire_date.strftime(
                        "%d %B %Y –≥–æ–¥–∞"
                    )
                    formatted_expire_date = (
                        formatted_expire_date.replace("January", "—è–Ω–≤–∞—Ä—è")
                        .replace("February", "—Ñ–µ–≤—Ä–∞–ª—è")
                        .replace("March", "–º–∞—Ä—Ç–∞")
                        .replace("April", "–∞–ø—Ä–µ–ª—è")
                        .replace("May", "–º–∞—è")
                        .replace("June", "–∏—é–Ω—è")
                        .replace("July", "–∏—é–ª—è")
                        .replace("August", "–∞–≤–≥—É—Å—Ç–∞")
                        .replace("September", "—Å–µ–Ω—Ç—è–±—Ä—è")
                        .replace("October", "–æ–∫—Ç—è–±—Ä—è")
                        .replace("November", "–Ω–æ—è–±—Ä—è")
                        .replace("December", "–¥–µ–∫–∞–±—Ä—è")
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
                    if current_date > credits_expire_date:
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                        profile_text = Text(
                            Bold("üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
                            "\n\n",
                            Bold("üî¥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"),
                            "\n",
                            f"–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {formatted_expire_date}",
                            "\n",
                            Bold("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: 0"),
                        )
                        credits_left = 0
                    else:
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –≤—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
                        days_left = (credits_expire_date - current_date).days
                        profile_text = Text(
                            Bold("üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
                            "\n\n",
                            Bold("üü¢ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞"),
                            "\n\n",
                            f"–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {formatted_expire_date}",
                            "\n\n",
                            Bold(f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"),
                            "\n",
                            Bold(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: {credits_left}"),
                        )

                except (ValueError, TypeError):
                    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã
                    profile_text = Text(
                        "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                        "\n",
                        Bold(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: {credits_left}"),
                    )
            else:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞
                profile_text = Text(
                    "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
                )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∫—É–ø–∫–∏, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –º–∞–ª–æ
            builder = None
            builder = InlineKeyboardBuilder()
            builder.row(
                types.InlineKeyboardButton(
                    text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data="pricing"
                )
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                profile_text.as_markdown(),
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=builder.as_markup() if builder else None,
            )
        else:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è
            error_text = Text(
                Bold("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ"),
                "\n\n",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            )
            await message.answer(
                error_text.as_markdown(), parse_mode=ParseMode.MARKDOWN_V2
            )

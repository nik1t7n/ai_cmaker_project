import asyncio
import logging
import os
import tempfile
import uuid

from aiogram import F, types, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InputMediaVideo, URLInputFile
from aiogram.utils.formatting import Bold, Text, Url, Italic
from aiogram.utils.keyboard import InlineKeyboardBuilder
from openai import OpenAI
import yaml
from bot.init import get_bot
from bot.states import VideoCreation
from bot.keyboards.keyboards import (
    get_after_ai_script_generation_inline_keyboard,
    get_after_user_script_generation_inline_keyboard,
    get_back_to_choosing_script_keyboard,
    get_script_method_inline_keyboard,
    get_subtitle_styles_inline_keyboard,
)

bot, dp = asyncio.run(get_bot())
router = Router()

### –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è ###
@router.callback_query(lambda c: c.data == "script_method:user")
async def user_script_mode_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ."

    inline_kb = get_back_to_choosing_script_keyboard()

    new_text = Text(
        Italic("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –≤—Ä—É—á–Ω—É—é."),
        "\n\n",
        Bold("–Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π!")
    ).as_markdown()

    kb_message = await bot.send_message(callback.message.chat.id, text, reply_markup=inline_kb)
    await state.update_data(kb_message_id=kb_message.message_id) 
    await callback.message.edit_text(text=new_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=None)
    await state.set_state(VideoCreation.user_script_input)


@router.callback_query(lambda c: c.data == "script_method:ai")
async def ai_script_mode_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    text = (
        "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò. –í–≤–µ–¥–∏—Ç–µ –∏–¥–µ—é –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è.\n\n"
            "üí° –û–ø–∏—à–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –≤–∏–¥–µ–æ, –∏ —è —Å–æ–∑–¥–∞–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Ç–µ–±—è (–æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
    )
    inline_kb = get_back_to_choosing_script_keyboard()
    await bot.send_message(callback.message.chat.id, text, reply_markup=inline_kb)
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.set_state(VideoCreation.ai_script_input)



### –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) ###
@router.message(VideoCreation.user_script_input, F.text)
async def process_user_script(message: types.Message, state: FSMContext):

    state_data = await state.get_data()
    user_script = message.text

    kb_message_id = state_data.get("kb_message_id")

    if kb_message_id:
        try:
            await bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=kb_message_id,
                reply_markup=None
            )
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –∏ —Ç.–¥.)
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")

    keyboard = get_after_user_script_generation_inline_keyboard()

    filename = f"script_{message.from_user.id}_{uuid.uuid4()}.txt"
    temp_dir = tempfile.mkdtemp(dir=os.getcwd())
    filepath = os.path.join(temp_dir, filename)

    with open(filepath, "w", encoding="utf-8") as f:
        f.write(user_script)
    
    caption = Text(
        Bold("–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ?")
    ).as_markdown()  

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await message.answer_document(
        FSInputFile(filepath, filename="–≤–Ω—É—Ç—Ä–∏_—ç—Ç–æ–≥–æ_—Ñ–∞–π–ª–∞_–ª–µ–∂–∏—Ç_–≤–∞—à_—Å—Ü–µ–Ω–∞—Ä–∏–π.txt"),
        caption=caption,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2,
    )

    os.remove(filepath)
    os.rmdir(temp_dir)

    await state.update_data(script=user_script)
    await state.set_state(VideoCreation.script_confirm)


### –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è ###
@router.callback_query(lambda c: c.data == "edit_user_script")
async def edit_user_script(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è.")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
        await callback.message.edit_caption(
            caption=Text(
                Bold("–û–∫–µ–π, –ø–æ–Ω—è–ª, –¥–∞–≤–∞–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π)")
            ).as_markdown(),
            reply_markup=None,  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            parse_mode=ParseMode.MARKDOWN_V2,
        )
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è:")
    except Exception as e:
        await state.update_data(is_video_generating=False)
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è:")

    await state.set_state(VideoCreation.user_script_input)


### –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ò–ò (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) ###
@router.message(VideoCreation.ai_script_input, F.content_type.in_({"text", "voice"}))
async def process_ai_script_input(message: types.Message, state: FSMContext):

    if message.content_type == "voice":
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        processing_msg = await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            voice_file = await bot.get_file(message.voice.file_id)
            voice_file_path = voice_file.file_path

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            voice_content = await bot.download_file(voice_file_path)

            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
                temp_file.write(voice_content.read())
                temp_file_path = temp_file.name

            client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
            with open(temp_file_path, "rb") as audio_file:
                transcription = client.audio.transcriptions.create(
                    model="gpt-4o-transcribe", file=audio_file, response_format="text"
                )

            os.unlink(temp_file_path)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            await processing_msg.delete()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é
            concept = transcription

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer(
                "‚ùå –£–ø—Å, –∫–∞–∫–∏–µ —Ç–æ –ø—Ä–æ–±–ª–µ–º–∫–∏ —Å–æ —Å–ª—É—Ö–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ)"
            )
            return
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –µ–≥–æ —Ç–µ–∫—Å—Ç
        concept = message.text

    state_data = await state.get_data()
    # existing_script_message_id = data.get("script_message_id")

    waiting_message = await message.answer("‚è≥–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω–∞—Ä–∏–π...")

    animation_symbols = ["‚è≥", "‚åõ"]
    for _ in range(10):
        for symbol in animation_symbols:
            await asyncio.sleep(1)
            try:
                await waiting_message.edit_text(f"{symbol} –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω–∞—Ä–∏–π...")
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
                break

    try:
        from video_script_generator import VideoScriptGenerator

        keyboard = get_after_ai_script_generation_inline_keyboard()

        script_generator = VideoScriptGenerator()
        logging.debug(f"\n\n\nIS EDITED:\n\n{state_data.get('is_script_edited')}\n\n\n")
        if "is_script_edited" in state_data and state_data["is_script_edited"]:
            logging.debug("\n\n\nWE RUN REFINE SCRIPT\n\n\n")
            script = await script_generator.refine_script(concept)
        else:
            logging.debug("\n\n\nWE RUN GENERATE SCRIPT\n\n\n")
            script = await script_generator.generate_script(concept)
        await state.update_data(script=script)

        if waiting_message:
            try:
                await waiting_message.delete()
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        filename = f"aiscript_{message.from_user.id}_{uuid.uuid4()}.txt"
        temp_dir = tempfile.mkdtemp(dir=os.getcwd())
        filepath = os.path.join(temp_dir, filename)

        with open(filepath, "w", encoding="utf-8") as f:
            f.write(script)
        
        caption = Text(
            Bold("–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ?")
        ).as_markdown()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        script_message = await message.answer_document(
            document=FSInputFile(filepath, filename="–≤–Ω—É—Ç—Ä–∏_—ç—Ç–æ–≥–æ_—Ñ–∞–π–ª–∞_–ª–µ–∂–∏—Ç_–≤–∞—à_—Å—Ü–µ–Ω–∞—Ä–∏–π.txt"),
            caption=caption,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN_V2,
        )

        os.remove(filepath)
        os.rmdir(temp_dir)

        await state.update_data(
            confirm_message_id=script_message.message_id, script=script
        )
        await state.set_state(VideoCreation.script_confirm)

    except asyncio.TimeoutError:
        if waiting_message:
            try:
                await waiting_message.delete()
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ waiting_message: {e}")
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º."
        )
        keyboard = get_script_method_inline_keyboard()
        await message.answer("–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π?", reply_markup=keyboard)
        await state.set_state(VideoCreation.choosing_script_method)

    except Exception as e:
        await state.update_data(is_video_generating=False)
        if waiting_message:
            try:
                await waiting_message.delete()
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ waiting_message: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )
        keyboard = get_script_method_inline_keyboard()
        await message.answer("–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π?", reply_markup=keyboard)
        await state.set_state(VideoCreation.choosing_script_method)


### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è (–ò–ò) ###
@router.callback_query(lambda c: c.data == "edit_script")
async def edit_script(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    state_data = await state.get_data()
    
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
        await callback.message.edit_caption(
            caption=Text(
                Bold("–û–∫–µ–π, –ø–æ–Ω—è–ª, –¥–∞–≤–∞–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π)")
            ).as_markdown(),
            reply_markup=None,  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            parse_mode=ParseMode.MARKDOWN_V2,
        )
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ò–ò-—Å—Ü–µ–Ω–∞—Ä–∏—è:")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.debug(f"\n\n\n–£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì\n\n\n")
        await state.update_data(is_script_edited=True)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è:")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–π 
    await state.set_state(VideoCreation.ai_script_input)

@router.callback_query(lambda c: c.data == "confirm_script")
async def choose_subtitles_style(callback: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()

    await state.update_data(is_script_edited=False)

    with open("config.yml", "r") as f:
        config = yaml.safe_load(f)

    gifs = []

    for str_number, value in config["video_editing"]["subtitle_styles"].items():
        file = FSInputFile(value["local_path"])
        gifs.append(InputMediaVideo(media=file))

    keyboard = get_subtitle_styles_inline_keyboard()

    text = Text(
        Bold("–í—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã 6 —Å—Ç–∏–ª–µ–π —Å—É–±—Ç–∏—Ç—Ä–æ–≤"),
        "\n\n",
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –∏ –ø–æ–µ—Ö–∞–ª–∏ –¥–∞–ª—å—à–µ)",
    ).as_markdown()

    await callback.message.edit_caption(
        caption=Text(
            Bold("–°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–Ω—è—Ç!"),
        ).as_markdown(),
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=None)

    await callback.message.answer_media_group(media=gifs)
    await callback.message.answer(
        text=text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2,
    )



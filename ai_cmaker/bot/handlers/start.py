import asyncio
import logging
import os

import httpx
from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InputMediaVideo, URLInputFile
from aiogram.utils.formatting import (
    Bold,
    HashTag,
    Italic,
    Text,
    Url,
    as_list,
    as_marked_section,
)

from bot.api.user import add_credits, create_user
from bot.constants import GREETING_TEXT, WEBHOOK_BASE_URL
from bot.init import get_bot
from bot.keyboards.keyboards import (
    get_after_instructions_keyboard,
    get_greeting_inline_keyboard,
    get_payment_keyboard,
)

bot, dp = asyncio.run(get_bot())


async def send_reminder(chat_id: int, user_id: int):
    try:
        await asyncio.sleep(120)
        reminder_text = "‚õ¥Ô∏è –ö–æ—Ä–∞–±–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏, –≤—ã–¥–≤–∏–≥–∞–µ–º—Å—è?"
        keyboard = get_greeting_inline_keyboard()
        await bot.send_message(chat_id, reminder_text, reply_markup=keyboard)
    except asyncio.CancelledError:
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚Äì –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass


router = Router()


### –ö–æ–º–∞–Ω–¥–∞ /start ###
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):

    # await state.clear()

    await state.update_data(chat_id=message.chat.id, user_id=message.from_user.id)
    error_msg = Text(
        Bold("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ —Å—Ç—Ä–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."),
        "\n\n",
        Italic("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–Ω–æ–≤–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start"),
    ).as_markdown()

    # creating user
    async with httpx.AsyncClient(timeout=10) as client:
        try:
            state_data = await state.get_data()
            user_id = state_data["user_id"]
            payload = {"user_id": user_id}
            response = await client.post(f"{WEBHOOK_BASE_URL}/api/users", json=payload)

            if response.status_code == 201:
                logging.info("User has been successfully created!")
                await state.update_data(user_id=user_id)
            elif response.status_code == 409:
                logging.debug(
                    "You are trying to create already existing user. Passing further"
                )
                pass  # because we have already registered this user
            else:
                logging.warning(
                    f"Unexpected server answer during user creation.\n"
                    f"Status: {response.status_code}\n"
                    f"Details: {response.text}"
                )
                await message.answer(error_msg, parse_mode=ParseMode.MARKDOWN_V2)
        except httpx.RequestError as exc:
            logging.critical("Critical error during user creation", f"Details: {exc}")
            raise Exception(f"Error during regitering user: {exc}")


    greeting_text = GREETING_TEXT

    keyboard = get_greeting_inline_keyboard()
    await message.answer(
        greeting_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )


@router.callback_query(lambda c: c.data == "instruction")
async def handle_instruction_callback(callback: types.CallbackQuery, state: FSMContext):
    # Process steps with unique emojis
    generation_steps = as_list(
        as_marked_section(
            Bold("‚ú® –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:\n"),
            "ü§ñ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∞–≤–∞—Ç–∞—Ä–∞",
            "üìù –°–æ–∑–¥–∞–µ—Ç—Å—è —Å—Ü–µ–Ω–∞—Ä–∏–π (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é –ò–ò –∏–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)",
            "üé® –í—ã–±–∏—Ä–∞–µ—Ç–µ —Å—Ç–∏–ª—å —Å—É–±—Ç–∏—Ç—Ä–æ–≤",
            "‚è±Ô∏è –û–∂–∏–¥–∞–µ—Ç–µ 5-10 –º–∏–Ω—É—Ç",
            "üé¨ –ü–æ–ª—É—á–∞–µ—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ",
            marker="",
        ),
        sep="\n",
    )

    # Payment information
    payment_info = as_list(
        as_marked_section(
            Bold("üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:\n"),
            "–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ FreedomPay - –Ω–∞–¥–µ–∂–Ω—É—é –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É",
            "–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è",
            "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞",
            marker="üîê ",
        ),
        sep="\n",
    )

    commands_info = as_list(
        as_marked_section(
            Bold("‚å®Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"),
            "/start ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞",
            "/profile ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            "/generate ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ",
            marker="‚ñ∂Ô∏è ",
        ),
        sep="\n",
    )

    # Combine all sections into a beautifully formatted message
    message = Text(
        Bold("üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?"),
        "\n\n",
        "–í—Å–µ–≥–æ —É –≤–∞—Å 3 –¥–µ–º–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
        "\n\n",
        Italic("üíé –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "),
        Bold('"–¢–∞—Ä–∏—Ñ—ã"'),
        "\n",
        "=================",
        "\n\n",
        generation_steps,
        "\n",
        "=================",
        "\n\n",
        payment_info,
        "\n",
        "=================",
        "\n\n",
        commands_info,
        "\n",
        "=================",
        "\n\n",
        Bold("üåü –ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ? –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–±—É–µ–º!'"),
    ).as_markdown()

    await callback.message.edit_reply_markup(reply_markup=None)

    # Send the response with appropriate keyboard
    keyboard = get_after_instructions_keyboard()
    await callback.message.answer(
        text=message, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=keyboard
    )


### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞—Ä–∏—Ñ–∞ (–∫–Ω–æ–ø–∫–∞ "üè∑Ô∏è –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏") ###
@router.callback_query(lambda c: c.data == "pricing")
async def handle_pricing_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    price_img_path = "assets/imgs/prices.png"

    caption = (
        "‚ú® –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç!\n\n"
        "üìä –ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:\n"
        "‚Ä¢ 10 –≤–∏–¥–µ–æ ‚Äî 15$ üí∞\n"
        "‚Ä¢ 30 –≤–∏–¥–µ–æ ‚Äî 45$ üí∞\n"
        "‚Ä¢ 50 –≤–∏–¥–µ–æ ‚Äî 70$ üí∞\n"
        "‚Ä¢ 100 –≤–∏–¥–µ–æ ‚Äî 135$ üí∞\n\n"
        "‚è± –í–∞–∂–Ω–æ: —É –≤–∞—Å –µ—Å—Ç—å —Ä–æ–≤–Ω–æ 28 –¥–Ω–µ–π, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞.\n\n"
        'üë§ –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä —Å –≤–∞—à–∏–º –ª–∏—Ü–æ–º? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ"!'
    )

    if os.path.exists(price_img_path):
        await bot.send_photo(
            callback.message.chat.id, photo=FSInputFile(price_img_path), caption=caption
        )
        await bot.send_message(
            callback.message.chat.id,
            text=Text(
                Bold("üëá –î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ üëá")
            ).as_markdown(),
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=get_payment_keyboard(),
        )
        await callback.message.edit_reply_markup(reply_markup=None)
    else:
        logging.warning(f"–§–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {price_img_path}")
        caption += Text(
            "\n\n", Bold("üëá –î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ üëá")
        ).as_markdown()

        await bot.send_message(
            callback.message.chat.id,
            text=caption,
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=get_payment_keyboard(),
        )
        await callback.message.edit_reply_markup(reply_markup=None)

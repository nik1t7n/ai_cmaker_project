import asyncio
import logging
import os
import re
import tempfile
import uuid
from datetime import datetime, timedelta

import httpx
import yaml
from aiogram import F, Router, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InputMediaVideo, URLInputFile
from aiogram.utils.formatting import Bold, Italic, Text, Url, as_marked_list
from aiogram.utils.keyboard import InlineKeyboardBuilder
from arq import create_pool
from openai import OpenAI

from arq_jobs import WorkerSettings
from bot.constants import WEBHOOK_BASE_URL
from bot.init import get_bot
from bot.keyboards.keyboards import (
    get_back_to_choosing_script_keyboard,
    get_payment_confirmation_inline_keyboard,
    get_script_method_inline_keyboard,
    get_subtitle_styles_inline_keyboard,
)
from bot.schemas import PackageType
from bot.states import PaymentForm, VideoCreation

bot, dp = asyncio.run(get_bot())
router = Router()


async def start_payment_checker(
    bot, user_id, chat_id, order_id, credits_amount: int, state: FSMContext
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    """
    redis_pool = await create_pool(WorkerSettings.redis_settings)

    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    start_time = datetime.now()
    # –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è (15 –º–∏–Ω—É—Ç)
    end_time = start_time + timedelta(minutes=15)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç
    logging.debug("\n\nLAUNCH CHECK_PAYMENT_JOB ")
    while datetime.now() < end_time:
        job = await redis_pool.enqueue_job(
            "check_payment_status_job",
            user_id,
            chat_id,
            order_id,
            credits_amount,
        )

        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        result = await job.result()

        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if result:
            logging.debug("\n\nWE GOT RESULT - MUST CLOSE\n\n")
            await redis_pool.close()
            return  # <-- –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º

        logging.debug("\n\nSTILL NO RESULT\n\n")
        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(10)

    # –ï—Å–ª–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ö–û–ù–ï–¶"
    error_msg = Text(
        Bold("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞ –∏–ª–∏ –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É!"),
        "\n\n",
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–Ω–æ–≤–æ",
    ).as_markdown()
    await bot.send_message(chat_id=chat_id, text=error_msg, parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(PaymentForm.confirmation)
    await redis_pool.close()


def normalize_phone(raw_phone: str) -> str | None:
    # –£–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = re.sub(r"\D", "", raw_phone)

    # –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–∞–º–∏ —Å—Ç—Ä–∞–Ω –∏ –¥–ª–∏–Ω–æ–π –Ω–æ–º–µ—Ä–∞ –±–µ–∑ –∫–æ–¥–∞
    country_codes = {
        "996": {"name": "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω", "length": 9},  # +996 XXX XXX XXX
        "7": {"name": "–†–æ—Å—Å–∏—è/–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "length": 10},  # +7 XXX XXX XX XX
        "998": {"name": "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "length": 9},  # +998 XX XXX XX XX
        "375": {"name": "–ë–µ–ª–∞—Ä—É—Å—å", "length": 9},  # +375 XX XXX XX XX
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ –∫–æ–¥—É
    country_code = None
    country_name = None

    for code, info in country_codes.items():
        if digits.startswith(code):
            country_code = code
            country_name = info["name"]
            expected_length = info["length"]
            digits_without_code = digits[len(code) :]
            break

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –º–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞
    if digits.startswith("0") and country_code is None:
        country_code = "996"
        country_name = "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω"
        expected_length = country_codes[country_code]["length"]
        digits_without_code = digits[1:]  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π 0

    # –ï—Å–ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    if country_code is None:
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞ –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    if len(digits_without_code) == expected_length:
        return f"+{country_code}{digits_without_code}"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    else:
        return None


def is_valid_email(email: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ email –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–æ –±–∞–∑–æ–≤–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É.
    """
    pattern = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
    return bool(re.fullmatch(pattern, email.strip()))


async def handle_any_payment(amount: str, callback: types.CallbackQuery):
    intro_text = Text(
        Bold(f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ —Å {amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏! üéâ"),
        "\n\n",
        "üí≥ –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ–ø–ª–∞—Ç–µ!",
        "\n\n",
        Bold("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:"),
        "\n\n",
        "üì± –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω: +996 XXX XXX XXX",
        "\n",
        "üì± –†–æ—Å—Å–∏—è/–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω: +7 XXX XXX XX XX",
        "\n",
        "üì± –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω: +998 XX XXX XX XX",
        "\n",
        "üì± –ë–µ–ª–∞—Ä—É—Å—å: +375 XX XXX XX XX",
        "\n\n",
        "‚ö†Ô∏è –í–∞–∂–Ω–æ! –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã.",
        "\n",
        "–î–ª—è –∫—ã—Ä–≥—ã–∑—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–∞–∫–∂–µ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ñ–æ—Ä–º–∞—Ç—ã:",
        "\n",
        "‚Ä¢ 996 XXX XXX XXX",
        "\n",
        "‚Ä¢ 0XXX XXX XXX",
    ).as_markdown()
    await callback.message.answer(intro_text, parse_mode=ParseMode.MARKDOWN_V2)


async def show_confirmation(message: types.Message, state: FSMContext):
    state_data = await state.get_data()

    confirm_msg = Text(
        Bold("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –º—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏, –¥–∞–≤–∞–π—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º:"),
        "\n\n",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {state_data.get('user_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
        "\n",
        f"–ü–æ—á—Ç–∞: {state_data.get('user_email', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
        "\n",
        f"–ü–∞–∫–µ—Ç: {state_data.get('package', '–ù–µ –≤—ã–±—Ä–∞–Ω')} –≤–∏–¥–µ–æ",
        "\n\n",
        "–í—Å–µ –≤–µ—Ä–Ω–æ?",
    ).as_markdown()

    keyboard = get_payment_confirmation_inline_keyboard()
    await message.answer(
        confirm_msg, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=keyboard
    )
    await state.set_state(PaymentForm.confirmation)


@router.callback_query(lambda c: c.data == "payment:10")
async def handle_10_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    await handle_any_payment("10", callback)

    await state.update_data(package=PackageType.PACK_10)
    await state.set_state(PaymentForm.waiting_for_phone)


@router.callback_query(lambda c: c.data == "payment:30")
async def handle_30_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    logging.debug("\n\nSTARTING HANDLING 30 VIDEOS PAYMENT\n\n")
    await handle_any_payment("30", callback)
    logging.debug("\n\n30 VIDEOS PAYMENT HANDLED\n\n")

    await state.update_data(package=PackageType.PACK_30)
    await state.set_state(PaymentForm.waiting_for_phone)


@router.callback_query(lambda c: c.data == "payment:50")
async def handle_50_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    await handle_any_payment("50", callback)

    await state.update_data(package=PackageType.PACK_50)
    await state.set_state(PaymentForm.waiting_for_phone)


@router.callback_query(lambda c: c.data == "payment:100")
async def handle_100_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    await handle_any_payment("100", callback)

    await state.update_data(package=PackageType.PACK_100)
    await state.set_state(PaymentForm.waiting_for_phone)


@router.message(PaymentForm.waiting_for_phone)
async def process_user_phone(message: types.Message, state: FSMContext):

    raw_phone = message.text
    phone = normalize_phone(raw_phone=raw_phone)

    if not phone:
        error_msg = Text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ)"
        ).as_markdown()
        await message.answer(error_msg, parse_mode=ParseMode.MARKDOWN_V2)
        return

    await state.update_data(user_phone=phone)

    state_data = await state.get_data()

    user_email = state_data.get("user_email")

    if user_email and user_email.strip():
        await show_confirmation(message=message, state=state)
    else:
        email_msg = Text(
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email.",
            "\n",
            "–ù–∞–ø—Ä–∏–º–µ—Ä: example@gmail.com",
        ).as_markdown()

        await message.answer(text=email_msg, parse_mode=ParseMode.MARKDOWN_V2)

        await state.set_state(PaymentForm.waiting_for_email)


@router.message(PaymentForm.waiting_for_email)
async def process_user_email(message: types.Message, state: FSMContext):

    email = message.text

    state_data = await state.get_data()

    if not is_valid_email(email):
        error_msg = Text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
            "\n",
            "–ù–∞–ø—Ä–∏–º–µ—Ä: example@gmail.com",
            "\n\n",
            "–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ",
        ).as_markdown()
        await message.answer(error_msg, parse_mode=ParseMode.MARKDOWN_V2)
        return

    await state.update_data(user_email=email)

    state_data = await state.get_data()

    confirm_msg = Text(
        Bold("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –º—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏, –¥–∞–≤–∞–π—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º:"),
        "\n\n",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {state_data['user_phone']}",
        "\n",
        f"–ü–æ—á—Ç–∞: {state_data['user_email']}",
        "\n",
        f"–ü–∞–∫–µ—Ç: {state_data['package']} –≤–∏–¥–µ–æ",
        "\n\n",
        "–í—Å–µ –≤–µ—Ä–Ω–æ?",
    ).as_markdown()
    keyboard = get_payment_confirmation_inline_keyboard()
    await message.answer(
        confirm_msg, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=keyboard
    )
    await state.set_state(PaymentForm.confirmation)


@router.callback_query(lambda c: c.data == "edit_phone")
async def handle_edit_phone(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    phone_msg = Text(
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ:",
    ).as_markdown()

    await callback.message.answer(phone_msg, parse_mode=ParseMode.MARKDOWN_V2)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(PaymentForm.waiting_for_phone)


@router.callback_query(lambda c: c.data == "edit_email")
async def handle_edit_email(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    email_msg = Text(
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, email –∑–∞–Ω–æ–≤–æ:",
    ).as_markdown()

    await callback.message.answer(email_msg, parse_mode=ParseMode.MARKDOWN_V2)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ email
    await state.set_state(PaymentForm.waiting_for_email)


@router.callback_query(PaymentForm.confirmation, F.data == "confirm_payment")
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext):

    state_data = await state.get_data()

    user_id = state_data["user_id"]
    package = state_data["package"]
    user_phone = state_data["user_phone"]
    user_email = state_data["user_email"]

    async with httpx.AsyncClient(timeout=10) as client:

        payload = {
            "user_id": user_id,
            "package": package,
            "user_phone": user_phone,
            "user_email": user_email,
        }

        logging.debug(f"\n\nPAYLOAD:\n\n {payload}\n\n")

        response = await client.post(f"{WEBHOOK_BASE_URL}/api/payments", json=payload)
        if response.status_code != 201:
            raise Exception("")

        logging.debug("\n\nPAYMENT CREATED\n\n")

        data = response.json()

        payment_url = data.get("payment_url")
        order_id = data.get("order_id")

        await state.update_data(order_id=order_id)

    link_msg = Text(
        Bold(
            "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –≤ –∫–Ω–æ–ø–∫–µ. –£ –≤–∞—Å –µ—Å—Ç—å 15 –º–∏–Ω—É—Ç –Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"
        )
    ).as_markdown()

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url))

    await callback.message.answer(
        text=link_msg,
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=builder.as_markup(),
    )

    chat_id = state_data["chat_id"]

    logging.debug("\n\nSTARTING TASK TO CHECK PAYMENTS\n")
    logging.debug(f"PAYLOAD: {user_id}\n{chat_id}\n{order_id}\n{int(package)}\n\n")
    asyncio.create_task(
        start_payment_checker(
            callback.bot, user_id, chat_id, order_id, credits_amount=int(package), state=state
        )
    )

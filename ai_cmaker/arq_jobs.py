import os
import logging
import asyncio
from typing import Dict, List

from aiogram.enums import ParseMode
from aiogram.utils.formatting import Bold, Text
import aiohttp
from arq import Retry, create_pool

from arq.connections import RedisSettings
from dotenv import load_dotenv
import httpx
from bot.constants import WEBHOOK_BASE_URL
from bot.init import get_bot
from services.aiml import MusicGenerator
from services.heygen import AuthenticationError, HeygenAPIError, HeygenProcessor, InvalidParameterError, ResourceNotFoundError, VideoGenerationConfig
from services.openai import OpenAIInteractions
from services.zapcap import ZapcapProcessor


load_dotenv()


async def process_openai_call_job(
    _ctx,
    messages: List[Dict[str, str]],
    model: str = "gpt-4o",
    temperature: float = 0.7,
    max_tokens: int = 2000,
) -> str:
    """
    Worker function for sending an async HTTP request to the OpenAI API.
    """
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise ValueError("OPENAI_API_KEY environment variable is not set.")

    url = "https://api.openai.com/v1/chat/completions"
    headers = {"Content-Type": "application/json", "Authorization": f"Bearer {api_key}"}
    payload = {
        "model": model,
        "messages": messages,
        "temperature": temperature,
        "max_tokens": max_tokens,
    }

    async with httpx.AsyncClient(timeout=httpx.Timeout(120.0)) as client:
        response = await client.post(url, headers=headers, json=payload)
        response.raise_for_status()
        result = response.json()
        return result["choices"][0]["message"]["content"]


async def heygen_generate_video_job(
    _ctx, processor: HeygenProcessor, config: VideoGenerationConfig
):
    try:
        video_url = await processor.generate_video(config)
        return video_url
    except AuthenticationError as e:
        # –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á)
        error_message = "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Heygen API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞."
        logging.error(f"{error_message} –î–µ—Ç–∞–ª–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return {"error": True, "message": error_message, "code": "auth_error", "details": str(e)}
    
    except ResourceNotFoundError as e:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –æ–± –æ—à–∏–±–∫–µ
        if "Avatar" in e.error_message and "not found" in e.error_message:
            error_message = f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. ID: {config.avatar_id}"
        elif "Voice" in e.error_message and "not found" in e.error_message:
            error_message = f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. ID: {config.voice_id}"
        else:
            error_message = "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Heygen API."
        
        logging.error(f"{error_message} –î–µ—Ç–∞–ª–∏: {e}")
        return {"error": True, "message": error_message, "code": "not_found", "details": str(e)}
    
    except InvalidParameterError as e:
        # –û—à–∏–±–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        error_message = "–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ."
        logging.error(f"{error_message} –î–µ—Ç–∞–ª–∏: {e}")
        return {"error": True, "message": error_message, "code": "invalid_params", "details": str(e)}
    
    except HeygenAPIError as e:
        # –û–±—â–∞—è –æ—à–∏–±–∫–∞ API Heygen
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Heygen API: {e.error_message}"
        logging.error(f"{error_message} –°—Ç–∞—Ç—É—Å: {e.status_code}, –ö–æ–¥: {e.error_code}")
        return {"error": True, "message": error_message, "code": e.error_code, "details": str(e)}
    
    except Exception as e:
        # –ü—Ä–æ—á–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        logging.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ heygen_generate_video_job: {e}")
        
        # –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞ - —Ä–µ—Ç—Ä–∞–∏
        if hasattr(_ctx, "job_try") and "Retry" in globals():
            # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ Retry, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, aiohttp.ClientError)
            if isinstance(e, (aiohttp.ClientError, asyncio.TimeoutError)) or (
                hasattr(e, "status_code") and 500 <= getattr(e, "status_code") <= 599
            ):
                # –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                raise Retry(defer=_ctx["job_try"] * 5)
        
        return {"error": True, "message": error_message, "code": "general_error", "details": str(e)}


async def zapcap_edit_video_job(
    _ctx, avatar_video_url: str, subtitle_template_id: str
) -> str:

    processor = ZapcapProcessor(os.getenv("ZAPCAP_API_KEY"))

    try:
        download_url, transcript, duration = await processor.process_video(
            avatar_video_url,
            upload_type="url",
            broll_percent=30,
            template_id=subtitle_template_id,
        )
    except httpx.HTTPStatusError as e:
        # if there is an error due to network or zapcap status - we retry
        if 500 <= e.response.status_code <= 600:
            raise Retry(defer=_ctx["job_try"] * 5)

    return download_url


async def generate_music_job(_ctx, script: str) -> str:
    openai_interactor = OpenAIInteractions()
    generator = MusicGenerator(os.getenv("AIML_API_KEY"))

    try:
        prompt_for_music_gen = await openai_interactor.agenerate_prompt_for_music(
            script=script
        )
    except httpx.HTTPStatusError as e:
        # if there is an error due to network or openai status - we retry
        if 500 <= e.response.status_code <= 600:
            raise Retry(defer=_ctx["job_try"] * 5)

    try:
        audio_url = await generator.generate_music(
            prompt_for_music_gen, steps=300, seconds_total=30
        )
    except httpx.HTTPStatusError as e:
        # if there is an error due to network or AIML status - we retry
        if 500 <= e.response.status_code <= 600:
            raise Retry(defer=_ctx["job_try"] * 5)

    return audio_url


async def check_payment_status_job(ctx, user_id, chat_id, order_id, credits_amount: int):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    """
    async with httpx.AsyncClient(timeout=5) as client:
        try:
            response = await client.post(
                f"{WEBHOOK_BASE_URL}/api/payments/status?order_id={order_id}",
                headers={"accept": "application/json"},
                content="",
            )

            if response.status_code == 200:
                data = response.json()
                status = data.get("status")

                if status == "completed":

                    add_credits_response = await client.post(
                        f"{WEBHOOK_BASE_URL}/api/users/{user_id}/credits/add",
                        params={"credits": credits_amount, "update_purchase_time": "true"}
                    )

                    logging.debug(f"\n\nWE ARE ADDING {credits_amount} CREDITS HERE\n\n")

                    if add_credits_response.status_code == 200:
                        
                        success_message = Text(
                                Bold("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!"),
                                "\n\n",
                                f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {credits_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤.",
                                "\n\n",
                                "üìä –ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏, –æ—Å—Ç–∞—Ç–∫–µ –∏ –¥—Ä—É–≥–∏—Ö –¥–µ—Ç–∞–ª—è—Ö –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /profile"
                            ).as_markdown()
                            
                        bot, dp = await get_bot()
                        await bot.send_message(chat_id=chat_id, text=success_message, parse_mode=ParseMode.MARKDOWN_V2)
                        return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É

            return False  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False


class WorkerSettings:
    redis_settings = RedisSettings(host="redis", port=6379)
    functions = [
        process_openai_call_job,
        heygen_generate_video_job,
        zapcap_edit_video_job,
        generate_music_job,
        check_payment_status_job,
    ]
    job_timeout = 1200

# processor = HeygenProcessor(api_key=os.getenv("HEYGEN_API_KEY"))
#     config = VideoGenerationConfig(
#         content=state_data["user_script"],
#         voice_id=state_data["avatar"]["voice_id"],
#         avatar_id=state_data["avatar"]["avatar_id"],
#         dimensions=(720, 1280),
#         speed=1.0,
#     )
#     try:
#         video_url = await processor.generate_video(config)
#         logging.info("Generated video URL: '{}'.".format(video_url))
#         print(f"Generated video URL: {video_url}")

#         await callback.message.answer(
#             Text(Bold("–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:"), "\n\n", Url(video_url)).as_markdown()
#         )

#         await waiting_message.delete()
